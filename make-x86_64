#!/bin/sh
#==========================================================

# config path
make_path="$(pwd)"
openwrt_dir="openwrt"
imagebuilder_path="${make_path}/${openwrt_dir}"

# targets
releases="21.02.5"
username="v1nch3r"

# config repo
imagebuilder_repo="https://downloads.openwrt.org/releases/${releases}/targets/x86/64/openwrt-imagebuilder-${releases}-x86-64.Linux-x86_64.tar.xz"
clash="https://github.com/Dreamacro/clash/releases/download/v1.14.0/clash-linux-amd64-v1.14.0.gz"
clash_tun="https://github.com/Dreamacro/clash/releases/download/premium/clash-linux-amd64-2023.03.18.gz"
clash_meta="https://github.com/djoeni/Clash.Meta/releases/download/Prerelease-WSS/Clash.Meta-linux-amd64-36e3318.gz"
speedtest_repo="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz"
kmod_inet_diag="https://github.com/v1nch3r/kmod-inet-diag/releases/download/v21.02.5-x86_64/kmod-inet-diag_5.4.215-1_x86_64.ipk"
luci_app_passwall2="https://github.com/v1nch3r/passwall-binaries/branches/master/v21.02.5/x86_64/"
luci_app_openclash="https://github.com/vernesong/OpenClash/releases/download/v0.45.59-beta/luci-app-openclash_0.45.59-beta_all.ipk"
luci_app_netmon="https://github.com/helmiau/helmiwrt-packages/releases/download/ipk/luci-app-netmon_1.3_all.ipk"
luci_app_shutdown="https://github.com/helmiau/helmiwrt-packages/releases/download/ipk/luci-app-shutdown_1.3_all.ipk"
luci_app_tinyfm="https://github.com/helmiau/helmiwrt-packages/releases/download/ipk/luci-app-tinyfm_2.5_all.ipk"
luci_app_base64="https://raw.githubusercontent.com/noct99/blog.vpngame.com/main/luci-app-base64_1.0_all.ipk"
luci_app_adguardhome="https://github.com/rufengsuixing/luci-app-adguardhome/releases/download/1.8-11/luci-app-adguardhome_1.8-11_all.ipk"
luci_app_zerotier="https://github.com/rufengsuixing/luci-app-zerotier/releases/download/1.0-16/luci-app-zerotier_1.0-16_all.ipk"

# config package
unused_packages="-dnsmasq"
driver_packages="kmod-usb-net-cdc-ether usb-modeswitch comgt-ncm kmod-usb-net-huawei-cdc-ncm"
openclash_iptables="coreutils-nohup bash iptables dnsmasq-full curl ca-certificates ipset ip-full iptables-mod-tproxy iptables-mod-extra libcap libcap-bin ruby ruby-yaml kmod-tun kmod-inet-diag unzip luci-compat luci luci-base"
my_packages="${unused_packages} luci-theme-material luci-app-ttyd luci-app-openclash luci-app-passwall luci-app-passwall2 luci-app-shutdown luci-app-netmon luci-app-zerotier luci-app-base64 luci-app-adguardhome luci-app-vnstat2 luci-app-sqm sqm-scripts lsblk nano htop openssh-sftp-server ${driver_packages} ${openclash_iptables}"

error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

download_imagebuilder () {
    wget ${imagebuilder_repo} || error_msg
    tar -xJf openwrt-imagebuilder-* && rm -f openwrt-imagebuilder-*.tar.xz
    mv -f immortalwrt-imagebuilder-* ${openwrt_dir}
}

custom_packages () {
    wget -P ${imagebuilder_path}/packages/ ${luci_app_openclash} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_netmon} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_shutdown} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_tinyfm} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_base64} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_adguardhome} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_zerotier} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${kmod_inet_diag} || error_msg
    svn co ${luci_app_passwall2} ${imagebuilder_path}/packages/ || error_msg
}

adjustment_rootfs () {
    mkdir -p ${imagebuilder_path}/files/etc/uci-defaults/
    cp -f ${make_path}/uci-defaults/* ${imagebuilder_path}/files/etc/uci-defaults/
    mkdir -p ${imagebuilder_path}/files/bin/
    wget -P ${make_path}/ ${speedtest_repo} || error_msg
    tar -xzvf ${make_path}/*.tgz -C ${imagebuilder_path}/files/bin/
    rm -f ${make_path}/*.tgz && rm -f ${imagebuilder_path}/files/bin/speedtest.*
}

adding_clash_core () {
    mkdir -p ${imagebuilder_path}/files/etc/openclash/core/
    cd ${imagebuilder_path}/files/etc/openclash/core/
    wget ${clash} && gunzip *.gz || error_msg
    mv -f clash-* clash && rm -f *.gz
    wget ${clash_tun} && gunzip *.gz || error_msg
    mv -f clash-* clash_tun && rm -f *.gz
    wget ${clash_meta} && gunzip *.gz || error_msg
    mv -f Clash.* clash_meta && rm -f *.gz
}

build_firmware () {
    cd ${imagebuilder_path}
    make image PROFILE="generic" PACKAGES="${my_packages}" FILES="files" || error_msg
    echo "success..."
}

download_imagebuilder
custom_packages
adjustment_rootfs
adding_clash_core
build_firmware

exit 0
